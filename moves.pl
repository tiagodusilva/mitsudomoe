:- use_module(library(lists)).


% reduce_remaining_rings(+GameState, +Player, -NewGameState)
% Decreases the amount of rings outside of play of Player after placement on the board
reduce_remaining_rings(GameState, Player, NewGameState) :-
    get_remaining_player_rings(GameState, Player, Rings),
    Rings > 0,
    NewRings is Rings - 1,
    replace_remaining_rings(GameState, Player, NewRings, NewGameState).

% can_ring_be_placed(+Stack)
% Checks if a ring can be placed on top of Stack(checks if it is empty or has a ring on top)
can_ring_be_placed([]).
can_ring_be_placed(Stack) :-
    last(Stack, LastElem),
    is_ring(LastElem).

% can_ball_be_placed(+Stack, +Player)
% Checks if a ball can be placed on top of Stack (checks for the excistance on a ring of the same player)
can_ball_be_placed(Stack, Player) :-
    last(Stack, LastElem),
    owns_ring(Player, LastElem).

% ------------------------
%      RING MOVEMENT
% ------------------------
% place_ring(+GameState, +Player, +Coords, -NewGameState)
% Places a Ring from Player at Cords
place_ring(GameState, Player, Coords, NewGameState) :-
    get_stack(GameState, Coords, Stack),
    can_ring_be_placed(Stack),
    owns_ring(Player, RingCode),
    append(Stack, [RingCode], NewStack),
    replace_stack(GameState, Coords, NewStack, NewGameState).

% place_new_ring(+GameState, +Player, +Coords, -NewGameState)
% Places a new Ring from Player at Cords
place_new_ring(GameState, Player, Coords, NewGameState) :-
    % Does the player still have rings to place?
    get_remaining_player_rings(GameState, Player, Rings),
    Rings > 0,
    place_ring(GameState, Player, Coords, PlacedRingGameState),
    reduce_remaining_rings(PlacedRingGameState, Player, NewGameState).

% remove_ring(+GameState, +Player, +Coords, -NewGameState)
% Removes a  Ring from Player at Cords
remove_ring(GameState, Player, Coords, NewGameState) :-
    get_stack(GameState, Coords, Stack),
    owns_ring(Player, RingCode),
    % Fails in every case where the player''s ring is NOT on top of the Stack (eg: wrong player ring or a ball)
    append(PoppedStack, [RingCode], Stack),
    replace_stack(GameState, Coords, PoppedStack, NewGameState).

% move_ring(+GameState, +Player, +Displace, -NewGameState)
% Moves a ring from a cell to another
move_ring(GameState, Player, [FromCoords, ToCoords], NewGameState) :-
    % Cannot move to the same place
    is_pos_different(FromCoords, ToCoords),
    remove_ring(GameState, Player, FromCoords, RemovedGameState),
    place_ring(RemovedGameState, Player, ToCoords, NewGameState).



% ------------------------
%      BALL MOVEMENT
% ------------------------
% can_vault(+GameState, +Player, +Displace, -BallsToRelocate)
% Checks if a ball can vault in a certain direction
can_vault(GameState, Player, [FromCoords, ToCoords], BallsToRelocate) :-
    % Already fails if not a valid trajectory in get_direction
    get_direction([FromCoords, ToCoords], Delta),
    add_coords(FromCoords, Delta, NextCoords),
    can_vault_aux(GameState, Player, [NextCoords, ToCoords], Delta, [], BallsToRelocate).

% Checks if the ball if of an enemy and then adds it to ballsDisplaced (on vault)
add_displaced_ball_if(Player, TopElem, FromCoords, BallsToRelocate, [FromCoords | BallsToRelocate]) :-
    \+ owns_ball(Player, TopElem), !.
add_displaced_ball_if(Player, TopElem, _, BallsToRelocate, BallsToRelocate) :-
    owns_ball(Player, TopElem).

% can_vault_aux(+GameState, +Player, +Displace, +Delta, +[], -BallsToRelocate)
% Auxiliary function of can_vault/4 that return the ballstodisplace after a vault if it is a possible one
% Can safely ignore the last stack (verification is done previously)
can_vault_aux(_, _, [Coords, Coords], _, BallsDisplaced, BallsDisplaced).
can_vault_aux(GameState, Player, [FromCoords, ToCoords], Delta, BallsDisplaced, BallsToRelocate) :-
    is_pos_different(FromCoords, ToCoords),
    get_top_elem(GameState, FromCoords, TopElem),
    is_ball(TopElem),
    add_coords(FromCoords, Delta, NextCoords),
    add_displaced_ball_if(Player, TopElem, FromCoords, BallsDisplaced, NewBallsDisplaced),
    can_vault_aux(GameState, Player, [NextCoords, ToCoords], Delta, NewBallsDisplaced, BallsToRelocate).


% Simple directly adjacent move and we never vault
balls_to_relocate_if_can_vault(_, _, FromCoords, ToCoords, []) :-
    % Green cut because no further solutions should be generated by the predicate below
    is_adjacent(FromCoords, ToCoords), !.
% More complex case, where we vault over balls
balls_to_relocate_if_can_vault(GameState, Player, FromCoords, ToCoords, BallsToDisplace) :-
    % Can we vault and if so what balls need to be relocated
    can_vault(GameState, Player, [FromCoords, ToCoords], BallsToDisplace).

% can_move_ball(+GameState, +Player, +Displace, -BallsToDisplace)
% Checks if we can move a ball to a specified location
can_move_ball(GameState, Player, [FromCoords, ToCoords], BallsToDisplace) :-
    % Verify it is not the same position
    is_pos_different(FromCoords, ToCoords),
    % Verify if there is a player ball
    get_top_elem(GameState, FromCoords, FromLast),
    owns_ball(Player, FromLast),
    % Verify if there is a player ring to move to
    get_top_elem(GameState, ToCoords, ToLast),
    owns_ring(Player, ToLast),
    balls_to_relocate_if_can_vault(GameState, Player, FromCoords, ToCoords, BallsToDisplace).

% remove_ball(+GameState, +Player, +Coords, -NewGameState)
% Removes a ball from Coords
remove_ball(GameState, Player, Coords, NewGameState) :-
    get_stack(GameState, Coords, Stack),
    owns_ball(Player, BallCode),
    append(PoppedStack, [BallCode], Stack),
    replace_stack(GameState, Coords, PoppedStack, NewGameState).

% place_ball(+GameState, +Player, +Coords, -NewGameState)~
% Places a new ball at Coords
place_ball(GameState, Player, Coords, NewGameState) :-
    get_stack(GameState, Coords, Stack),
    can_ball_be_placed(Stack, Player),
    owns_ball(Player, BallCode),
    append(Stack, [BallCode], NewStack),
    replace_stack(GameState, Coords, NewStack, NewGameState).

% displace_ball(+GameState, +Player, +Displace, -NewGameState)
% To be used for relocating enemy balls because it has less restrictions on movement
displace_ball(GameState, Player, [FromCoords, ToCoords], NewGameState) :-
    is_pos_different(FromCoords, ToCoords),
    remove_ball(GameState, Player, FromCoords, RemovedGameState),
    place_ball(RemovedGameState, Player, ToCoords, NewGameState).

% move_ball(+GameState, +Player, +Displace, -NewGameState, -BallsToDisplace)
% To be used when moving your own ball as we must consider vaulting
move_ball(GameState, Player, Displace, NewGameState, BallsToDisplace) :-
    can_move_ball(GameState, Player, Displace, BallsToDisplace),
    displace_ball(GameState, Player, Displace, NewGameState).

% Responsible for the first part of a move: Placing or moving a ring
move_ring_phase(GameState, Player, [[-1, -1], RingToCoords], RingPhaseGameState) :-
    place_new_ring(GameState, Player, RingToCoords, RingPhaseGameState).
move_ring_phase(GameState, Player, [RingFromCoords, RingToCoords], RingPhaseGameState) :-
    move_ring(GameState, Player, [RingFromCoords, RingToCoords], RingPhaseGameState).

% Responsible for the second & third part of a move: Moving a ball and relocating vaulted enemy balls
move_ball_phase(RingPhaseGameState, Player, BallDisplace, BallRelocations, NewGameState) :-
    move_ball(RingPhaseGameState, Player, BallDisplace, MovedBallGameState, BallsToDisplace),
    %Relocate balls after a vault
    next_player(Player, Enemy), !,
    relocate_balls(MovedBallGameState, Enemy, BallsToDisplace, BallRelocations, NewGameState).

% move(+GameState, +Move, -NewGameState)
% Makes a move Move and return the new GameState
move(GameState, Move, NewGameState) :-
    new_move(RingDisplace, BallDisplace, BallRelocations, Player, Move),
    move_ring_phase(GameState, Player, RingDisplace, RingPhaseGameState), !,
    move_ball_phase(RingPhaseGameState, Player, BallDisplace, BallRelocations, NewGameState), !.

% relocate_balls(+GameState, +Player, +BallRelocations, -FinalGameState)
% Relocates each ball displaced by a vault
relocate_balls(GameState, _, [], [], GameState).
relocate_balls(GameState, Player, BallsToDisplace, [Displace | Displacements], NewGameState) :-
    same_length(BallsToDisplace, [Displace | Displacements]),
    Displace = [FromCoords, _],
    delete(BallsToDisplace, FromCoords, NewBallsToDisplace),
    \+ same_length(BallsToDisplace, NewBallsToDisplace),
    displace_ball(GameState, Player, Displace, RelocatedGameState),
    relocate_balls(RelocatedGameState, Player, NewBallsToDisplace, Displacements, NewGameState).
